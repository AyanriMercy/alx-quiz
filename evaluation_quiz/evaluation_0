0. What information do the printf statements tell us about how our code is executed?
This code doesn’t work as intended.

#include "school.h"

/**
* main - prints even numbers from 0 to 100
* Return: 0
*/

int main(void)
{
        int i;

        for (i = 0; i < 100; i++)
        {
                if (i % 2 != 0)
                {
                        continue;
                }
                else
                {
                        break;
                }

                printf("%d\n", i);
        }

        return(0);
}
Let’s add printf statements to the code.

#include "school.h"

/**
* main - prints even numbers from 0 to 100
* Return: 0
*/

int main(void)
{
        int i;

        printf("Before loop\n");

        for (i = 0; i < 100; i++)
        {
                if (i % 2 != 0)
                {
                        printf("i is not even so don't print\n");
                        continue;
                }
                else
                {
                        printf("i is even, break to print\n");
                        break;
                }

                printf("Outside of if/else, still inside for loop\n");

                printf("%d\n", i);
        }

        printf("For loop exited\n");

        return(0);
}
What information do the printf statements tell us about how our code is executed?

ANSWER - A printf statement shows when the for loop is finished
	- printf statements shows that break will cause "For loop exited" to print, indicating that the even number is never printed

1. Which command should I use for changing a file owner?

ANSWER - chown

2. What shape will this code print?
#include <stdio.h>

/**
* print_shape - function to print a shape
* /
void print_shape(int num1, int num2) 
{
    int idx1, idx2;
    for (idx1 = 0; idx1 < num1; idx1++)
    {
        for (idx2 = 0; idx2 < num2; idx2++)
        {
            printf('#');
        }
        printf('\n');
    }
}

/** 
* main - calls print_shape()
*
* Return: Always 0.
**/

int main(void)
{
    print_shape(4, 3);
    return (0);
}

ANSWER - A rectangle with the character # with a height of 4 and width of 3

3. What is the output of the following piece of code?
int i;

i = 10;
while (i < 20)
{
    printf("%d", i % 2);
    i++;
}

ANSWER - 0101010101

4. What are the different steps to form an executable file from C source code?

ANSWER - Preprocessing, compilation, assembly, and linking

5. Which symbol should I use to redirect the error output to the standard output?

ANSWER - 2>&1

6. What is the numerical value for the r-xr--r-- permission?

ANSWER - 544

7. Which of these loop statements exist in C?

ANSWER - for
	- while
	- do...while

8. What is the problem with the following C code?
#include <stdio.h>

/**
* main - main function 
* Return: 0
*/

int main(void)
{
        int i;

        i = 65;

        while (i < 91)
        {
                putchar(i);
        }

        return (0);
}

ANSWER - i is not incremented in the while loop, so an infinite loop occurs

9. What command would you use to list files on Linux?

ANSWER - ls

10. How do you change directory on Linux?

ANSWER - cd

11. What does this code print?
* print_something - function to print something
*
* Return: Always 0
**/
int print_something(int num)
{
    int i, j;
    for (i = 0; i < num + 1; i++)
    {
        for (j = 0; j < num + 1; j++)
        {
            printf("%d", i * j);
            if (j < num)
            {
                printf(", ");
            }
        }
        printf("\n");
    }
    return (0);
}

ANSWER - The n times table, starting with 0

12. What is the size of the float data type on a 64-bit machine?

ANSWER - 4 bytes

13. Which command should I use to display the exit code of the previous command?

ANSWER - echo $?
